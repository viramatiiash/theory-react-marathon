import express from 'express'; // імпортуємо експрес. express - це функція, яка повертає об'єкт і він має набір певних методів.

const app = express(); // завдання експреса - це обробка запитів, які приходять від клієнтів на сервер
// Найчастіше використовуються методи .use(), .get(), .post(), .delete(), .put()

app.use((req, res, next) => {
  console.log('Ми отримали запит', req.method, req.url); // req.method - тип запиту, req.url - адреса, з якої прийшов запит

  // throw Error(); // На сторінці відобразиться 'Щось пішло не так'. app.use() відпрацьовує першим, обробка коду доходить до throw Error() і нас перекидає одразу на другий app.use(error), який обробляє цю помилку

  next(); // не можна забувати про функцію next, щоб виконання перейшло далі
  // res.send('Відповідь сервера з use'); // Таким чином ми можемо також завершити обробку і не використовувати функцію next(). // ! Тоді до наступного middleware не дійде, тобто, метод app.get() уже не відпрацює.

}) // next це функція, яка повідомляє фреймворку, що ми закінчили обробку і переключає виконання на наступну middleware.
// У терміналі прийде повідомлення: Ми отримали запит GET /
// Повідомлення приходить не у developer tools, а безпосередньо у термінал
// Якщо функцію next() не прописати, то сторінка не буде відображатися (немає зв'язку із сайтом) - клієнт чекав-чекав і не дочекався відповіді із сервера, оскільки наш фреймворк не знає, чи ми завершили обробку чи ні.


// ? middleware може вичитувати параметри маршрутів і їх опрацьовувати. Пишемо у рядку адреси у браузері localhost:3000/56/Tom, тоді наступний app.get цей маршрут зчитає і запише у термінал: Ми отримали запит GET /56/Tom
// id =  56
// name =  Tom

app.get('/:id/:name', (req, res) => { // .get() буде вичитувати параметри id та name із маршруту
  res.send('Відповідь сервера'); // надсилаємо відповідь клієнту. Ця функція називається middleware і такі функції вбудовуються у вищеназвані методи.

  console.log('id = ', req.params.id); // властивість params об'єкта req
  console.log('name = ', req.params.name);

}) // Перший аргумент - це адреса, другий - це функція, що вказує, що робити із request i response


app.get('/action', (req, res) => {
  res.send('Відповідь сервера з action');
}) // за адресою '/' видасть на сторінці: Відповідь сервера, а за адресою /action - Відповідь сервера з action

app.use((error, req, res, next) => {
  res.send('Щось пішло не так'); // так обробляємо помилки. Якщо у .use() без аргумента error викинути помилку, то відобразиться це повідомлення у терміналі
})

// ! Щоб подивитися, що там зверху - розкоментувати все!

// app.use(express.static('assets')); // express дає можливість достукатися до статичних даних сервера, наприклад до текстового файлу. Для цього використовується вбудований middleware node.static('папка'). Тоді треба перезапустити сервер, прописати адресу localhost:3000/hello.txt і на сторінку виведе текст: Привіт, це текстовий файл - що був у файлі hello.txt


app.listen(3000); // вказуємо номер порта

// ? Щоб запустити сервер - node + назва файлу